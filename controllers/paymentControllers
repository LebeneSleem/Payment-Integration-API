const axios = require("axios");

const initiatePayment = async (req, res) => {
    const { customer_name, customer_email, amount, customer_phone } = req.body;
  
    // Validate all required fields
    if (!customer_name || !customer_email || !amount || !customer_phone) {
      return res.status(400).json({
        status: "error",
        message: "All fields (customer_name, customer_email, amount, customer_phone) are required.",
      });
    }
  
    const payload = {
      email: customer_email, // Customer's email
      amount: amount * 100, // Convert to kobo (Paystack uses the smallest currency unit)
      metadata: {
        custom_fields: [
          {
            display_name: "Customer Name",
            variable_name: "customer_name",
            value: customer_name,
          },
          {
            display_name: "Customer Phone",
            variable_name: "customer_phone",
            value: customer_phone,
          },
        ],
      },
      callback_url: "http://localhost:2012/success", // Your callback URL
    };
  
    try {
      const response = await axios.post(
        `${process.env.PAYSTACK_BASE_URL}/transaction/initialize`,
        payload,
        {
          headers: {
            Authorization: `Bearer ${process.env.PAYSTACK_SECRET_KEY}`,
          },
        }
      );
  
      res.status(201).json({
        payment: {
          reference: response.data.data.reference,
          amount,
          customer_name,
          customer_email,
          customer_phone,
          status: "pending",
          link: response.data.data.authorization_url, // Payment link for the customer
        },
        status: "success",
        message: "Payment initiated successfully.",
      });
    } catch (error) {
      res.status(500).json({
        status: "error",
        message: "Failed to initiate payment.",
        error: error.response?.data || error.message,
      });
    }
  };
  



  const verifyPayment = async (req, res) => {
    const { reference } = req.params;
  
    if (!reference) {
      return res.status(400).json({
        status: "error",
        message: "Transaction reference is required.",
      });
    }
  
    try {
      const response = await axios.get(
        `${process.env.PAYSTACK_BASE_URL}/transaction/verify/${reference}`,
        {
          headers: {
            Authorization: `Bearer ${process.env.PAYSTACK_SECRET_KEY}`,
          },
        }
      );
  
      const data = response.data.data;
  
      res.status(200).json({
        payment: {
          reference: data.reference,
          amount: data.amount / 100, // Convert from kobo to the main currency unit
          customer_name: data.metadata.custom_fields[0]?.value,
          customer_phone: data.metadata.custom_fields[1]?.value,
          customer_email: data.customer.email,
          status: data.status,
        },
        status: "success",
        message: "Payment details retrieved successfully.",
      });
    } catch (error) {
      res.status(404).json({
        status: "error",
        message: "Payment verification failed.",
        error: error.response?.data || error.message,
      });
    }
  };
  

module.exports = { initiatePayment, verifyPayment };
